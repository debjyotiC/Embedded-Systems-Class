
UART_app.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000011c  00000190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b6c  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ef  00000000  00000000  00000e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000522  00000000  00000000  000015fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000016c  00000000  00000000  00001b20  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048a  00000000  00000000  00001c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000054e  00000000  00000000  00002116  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002664  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e1       	ldi	r30, 0x1C	; 28
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 8c 00 	jmp	0x118	; 0x118 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:

int main(void) {
	char serialCharacter;

	// -------- Inits --------- //
	DDRB = 0xff;                            /* set up LEDs for output */
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	84 b9       	out	0x04, r24	; 4
	initUSART();
  9a:	0e 94 5d 00 	call	0xba	; 0xba <initUSART>
	                         /* to test */

	// ------ Event loop ------ //
	while (1) {
		printString("Hello World!\r\n"); 
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	91 e0       	ldi	r25, 0x01	; 1
  a2:	0e 94 76 00 	call	0xec	; 0xec <printString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	2f ef       	ldi	r18, 0xFF	; 255
  a8:	81 ee       	ldi	r24, 0xE1	; 225
  aa:	94 e0       	ldi	r25, 0x04	; 4
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	80 40       	sbci	r24, 0x00	; 0
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x16>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x20>
  b6:	00 00       	nop
  b8:	f2 cf       	rjmp	.-28     	; 0x9e <main+0x8>

000000ba <initUSART>:
}

uint8_t receiveByte(void) {
  loop_until_bit_is_set(UCSR0A, RXC0);       /* Wait for incoming data */
  return UDR0;                                /* return register value */
}
  ba:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  be:	87 e6       	ldi	r24, 0x67	; 103
  c0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  c4:	e0 ec       	ldi	r30, 0xC0	; 192
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	8d 7f       	andi	r24, 0xFD	; 253
  cc:	80 83       	st	Z, r24
  ce:	88 e1       	ldi	r24, 0x18	; 24
  d0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  d4:	86 e0       	ldi	r24, 0x06	; 6
  d6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  da:	08 95       	ret

000000dc <transmitByte>:
  dc:	e0 ec       	ldi	r30, 0xC0	; 192
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	90 81       	ld	r25, Z
  e2:	95 ff       	sbrs	r25, 5
  e4:	fd cf       	rjmp	.-6      	; 0xe0 <transmitByte+0x4>
  e6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  ea:	08 95       	ret

000000ec <printString>:


                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
  ec:	0f 93       	push	r16
  ee:	1f 93       	push	r17
  f0:	cf 93       	push	r28
  f2:	fc 01       	movw	r30, r24
  uint8_t i = 0;
  while (myString[i]) {
  f4:	80 81       	ld	r24, Z
  f6:	88 23       	and	r24, r24
  f8:	59 f0       	breq	.+22     	; 0x110 <printString+0x24>
  fa:	8f 01       	movw	r16, r30
  fc:	c0 e0       	ldi	r28, 0x00	; 0
    transmitByte(myString[i]);
  fe:	0e 94 6e 00 	call	0xdc	; 0xdc <transmitByte>
    i++;
 102:	cf 5f       	subi	r28, 0xFF	; 255

                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
  uint8_t i = 0;
  while (myString[i]) {
 104:	f8 01       	movw	r30, r16
 106:	ec 0f       	add	r30, r28
 108:	f1 1d       	adc	r31, r1
 10a:	80 81       	ld	r24, Z
 10c:	81 11       	cpse	r24, r1
 10e:	f7 cf       	rjmp	.-18     	; 0xfe <printString+0x12>
    transmitByte(myString[i]);
    i++;
  }
}
 110:	cf 91       	pop	r28
 112:	1f 91       	pop	r17
 114:	0f 91       	pop	r16
 116:	08 95       	ret

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
